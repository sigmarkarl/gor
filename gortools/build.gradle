/*
 *  BEGIN_COPYRIGHT
 *
 *  Copyright (C) 2011-2013 deCODE genetics Inc.
 *  Copyright (C) 2013-2019 WuXi NextCode Inc.
 *  All Rights Reserved.
 *
 *  GORpipe is free software: you can redistribute it and/or modify
 *  it under the terms of the AFFERO GNU General Public License as published by
 *  the Free Software Foundation.
 *
 *  GORpipe is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
 *  INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
 *  NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
 *  the AFFERO GNU General Public License for the complete license terms.
 *
 *  You should have received a copy of the AFFERO GNU General Public License
 *  along with GORpipe.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
 *
 *  END_COPYRIGHT
 */

plugins {
    id 'antlr'
}

project(':gortools') {
    apply plugin: 'antlr'
    apply plugin: 'scala'
    // See: https://github.com/gradle/gradle/issues/6854
    configurations.all {
        if (name.startsWith("incrementalScalaAnalysis")) {
            extendsFrom = []
        }
    }

    idea {
        module {
            // Not using generatedSourceDirs because of
            // https://discuss.gradle.org/t/support-for-intellij-2016/15294/8
            sourceDirs += file("${projectDir}/build/generated/source/proto/main/java")
            sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc")
        }
    }

    generateGrammarSource {
        arguments += ["-visitor"]
    }

    // To build mixed java scala projects, the scala plugin can handle both java and scala code so
    // we add the java source dir to scala plugin and remove all src dirs from the java plugin.
    sourceSets.main.scala.srcDirs "src/main/java"
    sourceSets.main.scala.srcDirs file("${projectDir}/build/generated-src/antlr/main")
    sourceSets.main.java.srcDirs = []

    dependencies {
        compile project(':base:exception')
        compile project(':model')
        compile project(':querydialogs')
        compile project(':base:config')

        compile "io.prometheus:simpleclient:0.6.+"
        compile "org.scala-lang:scala-compiler:2.12.+"
        compile "org.scala-lang.modules:scala-xml_2.12:1.0.+"

        compile "org.scala-lang.modules:scala-parser-combinators_2.12:1.0.+"
        compile "org.scalanlp:breeze_2.12:0.13.+"
        compile "info.picocli:picocli:4.0.+"
        compile "de.tototec:de.tototec.cmdoption:0.6.+"
        compile "colt:colt:1.2.+"

        runtime project(':documentation')
        runtime "org.scala-lang:scala-reflect:2.12.+"
        runtime project(":gordrivers")

        testCompile project(':base:test')
        testCompile "org.mockito:mockito-core:3.0.+"
        testCompile "org.scalatest:scalatest_2.12:3.+"
        testCompile "org.scalacheck:scalacheck_2.12:1.13.+"
        testCompile 'com.github.stefanbirkner:system-rules:1.19.0'

        testRuntime "org.apache.derby:derby:10.14.+"

        antlr("org.antlr:antlr4:4.7")
    }


    // Tests

    // Run scala tests. These are not automatically picked up by gradle,
    // so we run them like this.
    task testScala(dependsOn: ['testClasses'], type: JavaExec) {
        systemProperty 'logback.configurationFile', new File("${project.rootDir}/tests/config/logback-test.xml").absolutePath
        main = 'org.scalatest.tools.Runner'
        args = ['-R', 'build/classes/scala/test', '-o']

        classpath = sourceSets.test.runtimeClasspath
    }
    //Disabling this in the test task, adding @RunWith(classOf[JUnitRunner]) instead so we can utilize the same report mechanism for all tests
    //test.dependsOn 'testScala'

    // Jar creation

    jar {
        manifest.attributes 'Main-Class': "gorsat.process.GorPipe"
    }

    // Distribution
    apply plugin: 'application'

    distributions {
        main {
            baseName "gor-scripts"
            contents {
                from(project(":documentation").jar.outputs.files.getFiles()) { into "lib" }
            }
        }
    }

    // Use the override keyword to override the default 'startScripts' task.
    def scripts = [
            'gorpipe'   : ['className'     : 'gorsat.process.GorPipe',
                           'defaultJvmOpts': ['-Djava.security.egd=file:/dev/./urandom',
                                              '-Dgor.querylimits.writequota.mb=0',
                                              '-Dgor.querylimits.timeout.seconds=0',
                                              '-Dlogback.configurationFile=__APP_HOME__/config/logback-console.xml']],

            'gor'       : ['className'     : 'org.gorpipe.gor.cli.GorCLI',
                           'defaultJvmOpts': ['-Djava.security.egd=file:/dev/./urandom',
                                              '-Dgor.querylimits.writequota.mb=0',
                                              '-Dgor.querylimits.timeout.seconds=0',
                                              '-Dlogback.configurationFile=__APP_HOME__/config/logback-console.xml']],

            'jessica'   : ['override'      : 'startScripts',
                           'className'     : 'org.gorpipe.jessica.Jessica',
                           'defaultJvmOpts': []],

            'gormanager': ['className'     : 'org.gorpipe.gor.manager.TableManagerCLI',
                           'defaultJvmOpts': ['-Djava.security.egd=file:/dev/./urandom',
                                              '-Dgor.querylimits.writequota.mb=0',
                                              '-Dgor.querylimits.timeout.seconds=0',
                                              '-Dlogback.configurationFile=__APP_HOME__/config/logback.xml']],

            'gortool'   : ['className'     : 'org.gorpipe.gor.tools.GorToolsCLI',
                           'defaultJvmOpts': ['-Dlogback.configurationFile=__APP_HOME__/config/logback.xml']]
    ]

    scripts.each() { scriptName, params ->
        def t = params.containsKey('override') ? tasks.getByName(params.override) : tasks.create(name: scriptName + 'StartScript', type: CreateStartScripts)
        updateScriptTask("GOR", scriptName, params, t, project)
    }


    mainClassName = "dummy-not-used"
}

if (file("build.deploy.gradle").exists()) {
    apply from: "build.deploy.gradle"
}
